Docker:
Microservices:
Instance of the services(small parts of the application) ?
Advantage in microservices ?
Example: make changes of signup service —> microservice 
Signin service 


What is Docker ?

Docker is an open-source platform designed to automate the deployment, scaling, and management of applications using containers.

What is Docker Image?
In Docker, an image is a lightweight, standalone, and executable package that includes everything needed to run a piece of software. This includes the application code, runtime, libraries, environment variables, and configuration files. Docker images are used to create Docker containers.
What is a Container ?
Container is an executable unit that packages an application and all of its dependencies, including libraries, binaries, and configuration files. Containers are based on Docker images, and when you run an image, a container is created.




What is a Docker Registry ?

An image registry is a centralized location for storing and sharing your container images. It can be either public or private.

While Docker Hub is a popular option, there are many other available container registries available today, including Amazon Elastic Container Registry(ECR), Azure Container Registry (ACR), and Google Container Registry (GCR). 




Writing a Dockerfile:

A Dockerfile is a text-based document, is a set of instructions that's used to create a container image. 
It provides instructions to the image builder on the commands to run, files to copy, startup command, and more.





Docker Engine:
The core component of Docker, responsible for creating and managing containers. It includes both the Docker daemon (which runs on the host machine) and the Docker CLI (command-line interface), which you use to interact with Docker.




Docker Volumes:


Docker commands:

List Images:


docker images

Pull an Image from a Registry:

docker pull <image_name>

Build an Image from a Dockerfile:

docker build -t <image_name> .

Remove an Image:

docker rmi <image_name>

Basic Commands for Docker Containers:
Run a Container:
docker run -d -p 8080:80 nginx
List Running Containers:
docker ps

Stop a Container:
docker stop <container_id>

Remove a Container:
docker rm <container_id>

create a new tag for an existing Docker image:
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]
Ex: docker tag imagename username/my-app:tagname
    Push the docker image to the Dockerhub: 
    docker push username/my-app:tagname
    Delete the docker tag:
    docker rmi my-app:tagname





Docker compose: .yml file
Docker Compose is a tool that allows you to define and manage multi-container Docker applications.
you can define services (containers), networks, and volumes needed for your application and then use simple commands to manage them.

To use docker-compose needs to be installed,
# sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# which docker-compose 
# sudo chmod +x /usr/local/bin/docker-compose

# docker-compose --version
OR
# docker compose version 

# which docker-compose  
Use the following command to start the containers based on your docker-compose.yml file:
# docker-compose up -d

To stop the running containers, use:
# docker-compose down

To view logs from the running containers, use:
# docker-compose logs -f

Networking in Docker allows containers to communicate with each other
App1 : 3 containers - not communicating -create network
3rd container- you’re working - create network 
App2 : 3 containers - create network 
Basic Networking Commands in Docker
List Networks:
docker network ls
Inspect a Network:
docker network inspect <network_name>
Create a Network:
docker network create my-network
Connect a Running Container to a Network:
docker network connect my-network my-container

Disconnect a Container from a Network:
docker network disconnect my-network my-container
Remove a network:
docker network rm <network_name>
To create a network:
docker network create my-bridge-network 
While creating a container: 
docker run --network my-bridge-network --name container1 busybox 





Docker volumes are used to persist data generated by and used by Docker containers. Unlike container filesystems, which are ephemeral and get deleted when the container is removed,
They are stored outside of the container’s filesystem and can be shared among multiple containers.

Types of Volumes: 
Named Volumes: These are volumes that are explicitly created and managed by Docker. 
Anonymous Volumes: These are created without a name and may be removed when the container is deleted unless they are referenced elsewhere.

    Create a Volume:
    docker volume create my-volume
 
    List Volumes:
    docker volume ls

    Inspect a Volume:
    docker volume inspect my-volume
 
    Remove a Volume:
    docker volume rm my-volume
   Using Volumes with Docker Containers

  docker run -d -v my-volume:/data my-image


docker inspect frontend-c















